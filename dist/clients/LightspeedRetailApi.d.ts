import { AccessTokenResponse, Customer, CustomerSearchParams, Item, ItemsSearchParams, PaymentType, PostCustomer, PostSale, Sale, TaxCategory } from './RetailApiTypes';
import RetailApiCursor from '../utils/RetailApiCursor';
declare type ConstructorOptions = {
    clientId: string;
    clientSecret: string;
    refreshToken: string;
};
declare class LightspeedRetailApi {
    private lastResponse;
    private readonly clientId;
    private readonly clientSecret;
    private refreshToken;
    constructor(opts: ConstructorOptions);
    private handleResponseError;
    private setLastResponse;
    private handleRateLimit;
    private performRequest;
    getToken(): Promise<AccessTokenResponse | never>;
    postItem(accountId: any, item: any): Promise<any>;
    postCustomer(accountId: number | string, customer: PostCustomer): Promise<Customer | never>;
    postCustomerType(accountId: any, customerType: any): Promise<any>;
    postItemAttributeSet(accountId: any, attributeSet: any): Promise<any>;
    postItemMatrix(accountId: any, itemMatrix: any): Promise<any>;
    postItemCustomField(accountId: any, customField: any): Promise<any>;
    postPaymentMethod(accountId: any, paymentMethod: any): Promise<any>;
    postCustomerCustomField(accountId: any, customField: any): Promise<any>;
    postSale(accountId: any, sale: PostSale): Promise<Sale>;
    putItem(accountId: any, item: any, ID: any): Promise<any>;
    putItemMatrix(accountId: any, matrix: any, ID: any): Promise<any>;
    putCustomer(accountId: any, customer: any, ID: any): Promise<any>;
    getAccount(): Promise<any>;
    getTaxCategory(accountId: any, taxCategoryId: any): Promise<TaxCategory>;
    getCompletedSalesByPeriod(accountId: any, start: any, end: any): RetailApiCursor<any>;
    getSales(accountId: any): RetailApiCursor<any>;
    getSale(accountId: any, saleId: any): Promise<any>;
    getSalePaymentByID(accountId: any, salePaymentID: any): Promise<any>;
    getSalePaymentBySaleID(accountId: any, saleID: any): Promise<any>;
    getSaleLineBySaleID(accountId: any, saleID: any): Promise<any>;
    getSaleLineByID(accountId: any, saleLineID: any): Promise<any>;
    getPaymentTypeByID(accountId: any, paymentTypeID: any): Promise<any>;
    getShopByID(accountId: any, shopID: any): Promise<any>;
    getDiscountByID(accountId: any, discountID: any): Promise<any>;
    getCustomerByID(accountId: any, customerID: any): Promise<any>;
    getContactByID(accountId: any, contactID: any): Promise<any>;
    getItemMatrixByID(accountId: any, itemMatrixID: any): Promise<any>;
    getItemsByMatrixID(accountId: any, itemMatrixID: any): Promise<any>;
    getItemByCustomSku(accountId: any, customSku: any): Promise<any>;
    getItemById(accountId: any, itemId: any, loadRelations?: string[]): Promise<Item>;
    getCategories(accountId: any): RetailApiCursor<any>;
    getManufacturers(accountId: any): RetailApiCursor<any>;
    getItems(accountId: any, itemsSearchParams?: ItemsSearchParams, load_relations?: string): RetailApiCursor<Item>;
    getPaymentTypes(accountId: any): RetailApiCursor<PaymentType>;
    getCustomers(accountId: any, customersSearchParams?: CustomerSearchParams): RetailApiCursor<Customer>;
    getCustomerTypes(accountId: any): RetailApiCursor<any>;
}
export default LightspeedRetailApi;
